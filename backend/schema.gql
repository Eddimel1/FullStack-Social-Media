# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Audio_F_Comment_F_Photo_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPhoto_G!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Comment_F_Photo_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPhoto_U!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Comment_F_Post_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPost_G!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Comment_F_Post_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPost_U!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Comment_F_Video_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForVideo_G!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Comment_F_Video_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForVideo_U!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Post_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: Post_G!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Post_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: Post_U!
  ownerId: Float!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Reply_F_Photo_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPhoto_G!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Reply_F_Photo_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPhoto_U!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Reply_F_Post_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPost_G!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Reply_F_Post_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPost_U!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Reply_F_Video_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForVideo_G!
  updatedAt: DateTime!
  url: String!
}

type Audio_F_Reply_F_Video_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForVideo_U!
  updatedAt: DateTime!
  url: String!
}

type ChatEntity {
  companion: Float!
  createdAt: DateTime!
  id: ID!
  messages: [MessageEntity!]!
  owner: UserEntity!
  updatedAt: DateTime!
}

type CommentForPhoto_G {
  audio: Audio_F_Comment_F_Photo_G!
  createdAt: DateTime!
  id: ID!
  image: Image_F_Comment_F_Photo_G!
  owner: Galery_Image_G!
  published: Boolean
  replies: ReplyForPhoto_G!
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Comment_F_Photo_G!
}

type CommentForPhoto_U {
  audio: Audio_F_Comment_F_Photo_U!
  createdAt: DateTime!
  id: ID!
  image: Image_F_Comment_F_Photo_U!
  owner: Galery_Image_U!
  ownerId: Float!
  published: Boolean
  replies: ReplyForPhoto_U!
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Comment_F_Photo_U!
}

type CommentForPost_G {
  audio: Audio_F_Comment_F_Post_G
  createdAt: DateTime!
  id: ID!
  image: Image_F_Comment_F_Post_G
  owner: Post_G!
  published: Boolean
  replies: ReplyForPost_G!
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Comment_F_Post_G
}

type CommentForPost_U {
  audio: Audio_F_Comment_F_Post_U
  createdAt: DateTime!
  id: ID!
  image: Image_F_Comment_F_Post_U
  owner: Post_U!
  ownerId: Float!
  published: Boolean
  replies: ReplyForPost_U
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Comment_F_Post_U
}

type CommentForVideo_G {
  audio: Audio_F_Comment_F_Video_G!
  createdAt: DateTime!
  id: ID!
  image: Image_F_Comment_F_Video_G!
  owner: Galery_Video_G!
  published: Boolean
  replies: ReplyForVideo_G!
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Comment_F_Video_G!
}

type CommentForVideo_U {
  audio: Audio_F_Comment_F_Video_U!
  createdAt: DateTime!
  id: ID!
  image: Image_F_Comment_F_Video_U!
  owner: Galery_Video_U!
  ownerId: Float!
  published: Boolean
  replies: ReplyForVideo_U!
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Comment_F_Video_U!
}

input CreateChatInput {
  companion: Float!
  owner: Float!
}

input CreateComment {
  ownerId: Float!
  published: Boolean = false
  text: String!
}

input CreateGroupInfo_I {
  description: String!
  groupId: Float!
  status: String
}

input CreateGroupInput {
  category: String!
  name: String!
  slogan: String!
}

input CreateMessageInput {
  chat_id: Float!
  from: Float!
  message: String!
  to: Float!
}

input CreatePostInput {
  privacy: String!
  published: Boolean!
  subject: String!
  text: String!
}

input CreatePost_F_Group_I {
  ownerId: Float!
  text: String!
}

input CreateRelationShip_G {
  groupId: Float!
  userId: Float!
}

input CreateReply {
  ownerId: Float
  published: Boolean = false
  receiverId: Float!
  replyId: Float
  text: String!
}

input CreateRequest_G {
  groupId: Float!
  userId: Float!
}

input CreateUserInfoInput {
  country: String
  first_name: String!
  last_name: String!
}

input CreateUserInput {
  birthDate: String!
  country: String!
  email: String!
  password: String!
  sex: String!
  username: String!
}

type CreatedRequest_O {
  accepter_id: Float!
  isSuccess: Boolean!
  requester_id: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteRequest_O {
  groupId: Float!
  isSuccess: Boolean!
  userId: Float!
}

type Delete_Message_WO_Owner {
  id: Float!
  isSuccess: Boolean!
  type: String!
}

type Delete_Message_W_Owner {
  id: Float!
  isSuccess: Boolean!
  ownerId: Float!
  type: String!
}

type FindAllComment_F_Photo_G {
  items: [CommentForPhoto_G!]!
  portion: Float!
  totalCount: Float!
}

type FindAllComment_F_Photo_U {
  items: [CommentForPhoto_U!]!
  portion: Float!
  totalCount: Float!
}

type FindAllComment_F_Post_G {
  items: [CommentForPost_G!]!
  portion: Float!
  totalCount: Float!
}

type FindAllComment_F_Post_U {
  items: [CommentForPost_U!]!
  portion: Float!
  totalCount: Float!
}

type FindAllComment_F_Video_G {
  items: [CommentForVideo_G!]!
  portion: Float!
  totalCount: Float!
}

type FindAllPosts_U {
  items: [Post_U!]!
  portion: Float!
  totalCount: Float!
}

type FindAndCountFriends_O {
  friends: [SanitizedUser!]!
  totalCount: Float!
}

type FindAndCountRequests_O {
  requests: [FriendRequest!]!
  totalCount: Float!
}

input FindOne_W_Owner_I {
  id: Float!
  ownerId: Float
}

input FindRelationShip_G {
  groupId: Float!
  userId: Float!
}

input FindRequest_G {
  groupId: Float!
  userId: Float!
}

type FriendRequest {
  accepter: UserEntity!
  requester: UserEntity!
}

type FriendShip {
  user1: UserEntity!
  user1_side: User1Side!
  user1_side_private: User1SidePrivate!
  user2: UserEntity!
  user2_side: User2Side!
  user2_side_private: User2SidePrivate!
  users_shared_side: UsersSharedSide!
}

type G_Avatar_EN {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: GroupEntity!
  updatedAt: DateTime!
  url: String!
}

type G_Cover_EN {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: GroupEntity!
  updatedAt: DateTime!
  url: String!
}

type Galery_Audio_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: GroupEntity!
  updatedAt: DateTime!
  url: String!
}

type Galery_Audio_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: UserEntity!
  updatedAt: DateTime!
  url: String!
}

type Galery_Image_G {
  comments: CommentForPhoto_G!
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: GroupEntity!
  updatedAt: DateTime!
  url: String!
}

type Galery_Image_U {
  comments: CommentForPhoto_U!
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: UserEntity!
  updatedAt: DateTime!
  url: String!
}

type Galery_Video_G {
  comments: CommentForVideo_G!
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: GroupEntity!
  updatedAt: DateTime!
  url: String!
}

type Galery_Video_U {
  comments: CommentForVideo_G!
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: UserEntity!
  updatedAt: DateTime!
  url: String!
}

type GroupEntity {
  audio: [Galery_Audio_G!]!
  avatar: G_Avatar_EN!
  category: String!
  cover: G_Cover_EN!
  createdAt: DateTime!
  group_info: GroupInfo!
  id: Float!
  images: [Galery_Image_G!]!
  name: String!
  owner: UserEntity!
  posts: [Post_G!]!
  slogan: String!
  updatedAt: DateTime!
  videos: [Galery_Video_G!]!
}

type GroupInfo {
  createdAt: DateTime!
  description: String!
  id: Float!
  owner: GroupEntity!
  ownerId: Float!
  status: String
  updatedAt: DateTime!
}

type GroupSide {
  blocked: Boolean!
  group_user_relation: Group_User_Relation!
  id: Float!
  role: String!
  warnings: Float!
}

type GroupSidePrivate {
  ban_reason: String
  group_user_relation: Group_User_Relation!
  id: Float!
  user_characteristic: String
}

type GroupUserRequest {
  group: GroupEntity!
  group_as_what: String!
  user: UserEntity!
  user_as_what: String!
}

type GroupUserSharedSide {
  group_recommendation: String
  group_user_relation: Group_User_Relation!
  id: Float!
  user_recommendation: String
}

type Group_User_Relation {
  group: GroupEntity!
  group_side: GroupSide!
  group_side_private: GroupSidePrivate!
  shared_side: GroupUserSharedSide!
  user: UserEntity!
  user_side: UserSide_G!
  user_side_private: UserSidePrivate!
}

type Image_F_Comment_F_Photo_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPhoto_G!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Comment_F_Photo_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPhoto_U!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Comment_F_Post_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPost_G!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Comment_F_Post_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPost_U!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Comment_F_Video_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForVideo_G!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Comment_F_Video_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForVideo_U!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Post_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: Post_G!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Post_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: Post_U!
  ownerId: Float!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Reply_F_Photo_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPhoto_G!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Reply_F_Photo_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPhoto_U!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Reply_F_Post_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPost_G!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Reply_F_Post_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPost_U!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Reply_F_Video_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForVideo_G!
  updatedAt: DateTime!
  url: String!
}

type Image_F_Reply_F_Video_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForVideo_U!
  updatedAt: DateTime!
  url: String!
}

type IsSuccess_O {
  friendId: Float!
  isSuccess: Boolean!
}

input LoginUserInput {
  password: String!
  username: String!
}

type MessageEntity {
  chat: ChatEntity!
  createdAt: DateTime!
  from: Float!
  id: Float!
  message: String!
  to: Float!
  updatedAt: DateTime!
}

type Mutation {
  addMessage(createMessage: CreateMessageInput!): MessageEntity!
  createChat(createChat: CreateChatInput!): ChatEntity!
  createCommentForPhoto_G(createCommentInput: CreateComment!): CommentForPhoto_G!
  createCommentForPhoto_U(createCommentInput: CreateComment!): CommentForPhoto_U!
  createCommentForPost_G(createCommentInput: CreateComment!): CommentForPost_G!
  createCommentForPost_U(createCommentInput: CreateComment!): CommentForPost_U!
  createCommentForVideo_G(createCommentInput: CreateComment!): CommentForVideo_G!
  createCommentForVideo_U(createCommentInput: CreateComment!): CommentForVideo_U!
  createFriendShip(requester_id: Float!): SanitizedUser!
  createGroup(createGroupInput: CreateGroupInput!): GroupEntity!
  createGroupInfo(createGroupInfoInput: CreateGroupInfo_I!): GroupInfo!
  createGroupToUserRequest(createGroupToUserRequest: CreateRequest_G!): GroupUserRequest!
  createGroupUserRelationship_G(CreateRelationShip_G: CreateRelationShip_G!): Group_User_Relation!
  createGroupUserRelationship_U(groupId: Float!): Group_User_Relation!
  createPost(createPostInput: CreatePostInput!): Post_U!
  createPostForGroup(createPostForGroup: CreatePost_F_Group_I!): Post_G!
  createReplyForPhoto_G(createReply: CreateReply!): ReplyForPhoto_G!
  createReplyForPhoto_U(CreateReply: CreateReply!): ReplyForPhoto_U!
  createReplyForPost_G(CreateReply: CreateReply!): ReplyForPost_G!
  createReplyForPost_U(CreateReply: CreateReply!): ReplyForPost_U!
  createReplyForVideo_G(CreateReply: CreateReply!): ReplyForVideo_G!
  createReplyForVideo_U(CreateReply: CreateReply!): ReplyForVideo_U!
  createRequest(accepter_id: Float!): CreatedRequest_O!
  createUser(createUser: CreateUserInput!): UserEntity!
  createUserInfo(createUserInfoInput: CreateUserInfoInput!): UserInfoEntity!
  createUserToGroupRequest(groupId: Float!): GroupUserRequest!
  declineAllRequests: FriendRequest!
  declineRequest(accepter_id: Float!): FriendRequest!
  deleteReplyForPhoto_G(id: Float!): isSuccess_Reply!
  deleteReplyForPhoto_U(id: Float!): ReplyForPhoto_U!
  deleteReplyForPost_G(id: Float!): ReplyForPost_G!
  deleteReplyForPost_U(id: Float!): ReplyForPost_U!
  deleteReplyForVideo_G(id: Float!): isSuccess_Reply!
  deleteReplyForVideo_U(id: Float!): ReplyForVideo_U!
  destroyRelationship_G(FindRelationShip_G: FindRelationShip_G!): isSuccess_G!
  destroyRelationship_U(groupId: Float!): isSuccess_G!
  logOut: messageT!
  login(loginUserInput: LoginUserInput!): UserEntity!
  refreshToken: messageT!
  removeCommentForPhoto_G(searchAllCommentForVideo: SearchComment!): CommentForPhoto_G!
  removeCommentForPhoto_U(searchAllCommentForVideo: SearchComment!): CommentForPhoto_U!
  removeCommentForPost_G(searchAllCommentForPost: SearchComment!): CommentForPost_G!
  removeCommentForPost_U(searchAllCommentForPost: SearchComment!): CommentForPost_U!
  removeCommentForVideo_G(searchAllCommentForVideo: SearchComment!): CommentForVideo_G!
  removeCommentForVideo_U(searchAllCommentForVideo: SearchComment!): CommentForVideo_U!
  removeFriend(friendId: Float!): IsSuccess_O!
  removeGroup(groupId: Float!): GroupEntity!
  removeGroupInfo(id: Float!): Delete_Message_WO_Owner!
  removeMyRequest(accepter_id: Float!): FriendRequest!
  removePost(postId: Float!): Post_U!
  removePostForGroup(removeGroupPost: FindOne_W_Owner_I!): Delete_Message_W_Owner!
  removeRequestToGroup(groupId: Float!): DeleteRequest_O!
  removeRequestToUser(findGroupToUserRequest: FindRequest_G!): DeleteRequest_O!
  removeUser(id: Float!): Float!
  updateCommentForPhoto_G(updateCommentInput: UpdateComment!): CommentForPhoto_G!
  updateCommentForPhoto_U(updateCommentInput: UpdateComment!): CommentForPhoto_U!
  updateCommentForPost_G(updateCommentInput: UpdateComment!): CommentForPost_G!
  updateCommentForPost_U(updateCommentInput: UpdateComment!): CommentForPost_U!
  updateCommentForVideo_G(updateCommentInput: UpdateComment!): CommentForVideo_G!
  updateCommentForVideo_U(updateCommentInput: UpdateComment!): CommentForVideo_U!
  updateGroupInfo(updateGroupInfoInput: UpdateGroupInfo_I!): GroupInfo!
  updateGroupPrivateSide(updateGroupPrivateSide: UpdateRelationShip_G!): UpdatePrivateGroupSide_O!
  updateGroupSide(UpdateRelationShip_G: UpdateRelationShip_G!): UpdateGroupSide_O!
  updateMyPrivateSide(myPrivateSideUpdate: UpdatePrivateSide_I!): UserPrivateSide!
  updateMySide(mySideUpdate: UpdateSide_I!): UserSide!
  updateOneReplyForPhoto_G(updateReply: UpdateReply!): ReplyForPhoto_G!
  updateOneReplyForPost_G(updateReply: UpdateReply!): ReplyForPost_G!
  updateOneReplyForVideo_G(updateReply: UpdateReply!): ReplyForVideo_G!
  updateOwnedGroup: GroupEntity!
  updatePost(updatePostInput: UpdatePostInput!): Post_U!
  updatePostForGroup(updatePostsForGroupInput: UpdatePostForGroup_I!): Post_G!
  updateReplyForPhoto_U(updateReply: UpdateReply!): ReplyForPhoto_U!
  updateReplyForPost_U(updateReply: UpdateReply!): ReplyForPost_U!
  updateReplyForVideo_U(updateReply: UpdateReply!): ReplyForVideo_U!
  updateSharedSide(sharedSideUpdate: UpdateSharedSide_I!): UserSide!
  updateUserInfo(updateUserInfoInput: UpdateUserInfoInput!): UserInfoEntity!
  updateUserPrivateSide(updateUserPrivateSide: UpdateRelationShip_U!): UpdatePrivateUserSide_O!
  updateUserSide(UpdateRelationShip_U: UpdateRelationShip_U!): UpdateUserSide_O!
}

type Post_G {
  audio: Audio_F_Post_G!
  comments: [CommentForPost_G!]!
  createdAt: DateTime!
  id: ID!
  image: Image_F_Post_G!
  likes: Float!
  owner: GroupEntity!
  privacy: String
  published: Boolean
  subject: String
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Post_G!
}

type Post_U {
  audio: Audio_F_Post_U
  comments: [CommentForPost_U!]
  createdAt: DateTime!
  id: ID!
  image: Image_F_Post_U
  likes: Float!
  owner: UserEntity!
  ownerId: Float!
  privacy: String
  published: Boolean
  subject: String
  text: String
  updatedAt: DateTime!
  video: Video_F_Post_U
}

type Query {
  findAllCommentsForPhoto_G(photoId: Float!): FindAllComment_F_Photo_G!
  findAllCommentsForPhoto_U(photoId: Float!): FindAllComment_F_Photo_U!
  findAllCommentsForPost_G(photoId: Float!): FindAllComment_F_Post_G!
  findAllCommentsForPost_U(postId: Float!): FindAllComment_F_Post_U!
  findAllCommentsForVideoEntity_U(photoId: Float!): FindAllComment_F_Post_U!
  findAllCommentsForVideo_G(videoId: Float!): FindAllComment_F_Video_G!
  findAllFriends: FindAndCountFriends_O!
  findAllGroupPosts(groupId: Float!): FindAllPosts_U!
  findAllMyRequests: FindAndCountRequests_O!
  findAllOwnedGroups: [GroupEntity!]!
  findAllPosts(id: Float): FindAllPosts_U!
  findAllRelationshipsWithGroups: [Group_User_Relation!]!
  findAllRelationshipsWithUsers(groupId: Float!): [Group_User_Relation!]!
  findAllRequestsToGroup: [GroupUserRequest!]!
  findAllRequestsToMe: FindAndCountRequests_O!
  findAllRequestsToUser(groupId: Float!): [GroupUserRequest!]!
  findAll_A_Count_RepliesForPhoto_G(id: Float!): find_all_F_Video_G!
  findAll_A_Count_RepliesForPhoto_U(id: Float!): find_all_F_Photo_U!
  findAll_A_Count_RepliesForPost_G(id: Float!): find_all_F_Post_G!
  findAll_A_Count_RepliesForPost_U(id: Float!): find_all_F_Post_U!
  findAll_A_Count_RepliesForVideo_U(id: Float!): find_all_F_Video_U!
  findAncestorsTree_F_Photo_G(id: Float!): ReplyForPhoto_G!
  findAncestorsTree_F_Photo_U(id: Float!): ReplyForPhoto_U!
  findAncestorsTree_F_Post_G(id: Float!): ReplyForPost_G!
  findAncestorsTree_F_Post_U(id: Float!): ReplyForPost_U!
  findAncestorsTree_F_Video_G(id: Float!): ReplyForVideo_G!
  findAncestorsTree_F_Video_U(id: Float!): ReplyForVideo_U!
  findDescendantsTree_F_Photo_G(id: Float!): [ReplyForPhoto_G!]!
  findDescendantsTree_F_Post_G(id: Float!): [ReplyForPost_G!]!
  findDescendantsTree_F_Post_U(depth: Float!, id: Float!): [ReplyForPost_U!]!
  findDescendantsTree_F_Video_U(id: Float!): [ReplyForVideo_U!]!
  findDescendantsTree_G(id: Float!): [ReplyForVideo_G!]!
  findDescendantsTree_U(id: Float!): [ReplyForPhoto_U!]!
  findOne(searchAllCommentForVideo: SearchComment!): CommentForPhoto_G!
  findOneCommentForPhoto_U(searchAllCommentForVideo: SearchComment!): CommentForPhoto_U!
  findOneCommentForPost_G(searchAllCommentForPost: SearchComment!): CommentForPost_G!
  findOneCommentForPost_U(searchAllCommentForPost: SearchComment!): CommentForPost_U!
  findOneCommentForVideo_G(searchAllCommentForVideo: SearchComment!): CommentForVideo_G!
  findOneCommentForVideo_U(searchAllCommentForVideo: SearchComment!): CommentForVideo_U!
  findOneFriend(friendId: Float!): SanitizedUser!
  findOneGroupInfo(id: Float!): GroupInfo!
  findOneGroupPost(findGroupPost: FindOne_W_Owner_I!): Post_G!
  findOneMyRequest(accepter_id: Float!): FriendRequest!
  findOneOwnedGroup(groupId: Float!): GroupEntity!
  findOnePost(findPost: FindOne_W_Owner_I!): Post_U!
  findOneRelationshipWithGroup(groupId: Float!): Group_User_Relation!
  findOneRelationshipWithUser(FindRelationShip_G: FindRelationShip_G!): Group_User_Relation!
  findOneRequestToGroup(groupId: Float!): GroupUserRequest!
  findOneRequestToMe(accepter_id: Float!): FriendRequest!
  findOneRequestToUser(findGroupToUserRequest: FindRequest_G!): GroupUserRequest!
  findOneUserInfo(id: Float): UserInfoEntity!
  getAllUsers: getAllUser_O!
  getOneUser(id: Float): UserEntity!
  readMyFriendsSide(readMyFriendsSide: ReadSide_I!): UserSide!
  readMyPrivateSide(readMyPrivateSide: ReadSide_I!): UserPrivateSide!
  readMySide(readMySide: ReadSide_I!): UserSide!
  removeFriend(sideId: Float!): UsersSharedSide!
  returnAllChats: ChatEntity!
}

input ReadSide_I {
  friendId: Float!
  sideId: Float!
}

type ReplyForPhoto_G {
  audio: Audio_F_Reply_F_Photo_G!
  children: [ReplyForPhoto_G!]
  comment: CommentForPhoto_G
  createdAt: DateTime!
  id: ID!
  image: Image_F_Reply_F_Photo_G!
  ownerId: Float!
  parent: ReplyForPhoto_G!
  published: Boolean
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Reply_F_Photo_G!
}

type ReplyForPhoto_U {
  audio: Audio_F_Reply_F_Photo_U!
  children: [ReplyForPhoto_U!]
  comment: CommentForPhoto_U
  createdAt: DateTime!
  id: Float!
  image: Image_F_Reply_F_Photo_U!
  ownerId: Float!
  parent: ReplyForPhoto_U!
  published: Boolean
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Reply_F_Photo_U!
}

type ReplyForPost_G {
  audio: Audio_F_Reply_F_Post_G!
  children: [ReplyForPost_G!]
  comment: CommentForPost_G
  createdAt: DateTime!
  id: ID!
  image: Image_F_Reply_F_Post_G!
  ownerId: Float!
  parent: ReplyForPost_G!
  published: Boolean
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Reply_F_Post_G!
}

type ReplyForPost_U {
  audio: Audio_F_Reply_F_Post_U
  children: [ReplyForPost_U!]
  comment: CommentForPost_U
  createdAt: DateTime!
  id: Float!
  image: Image_F_Reply_F_Post_U
  ownerId: Float
  parent: ReplyForPost_U!
  parentId: Float
  published: Boolean
  receiver: UserEntity!
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Reply_F_Post_U
}

type ReplyForVideo_G {
  audio: Audio_F_Reply_F_Video_G!
  children: [ReplyForVideo_G!]
  comment: CommentForVideo_G
  createdAt: DateTime!
  id: Float!
  image: Image_F_Reply_F_Video_G!
  ownerId: Float!
  parent: ReplyForVideo_G!
  published: Boolean
  text: String!
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Reply_F_Video_G!
}

type ReplyForVideo_U {
  audio: Audio_F_Reply_F_Video_U!
  children: [ReplyForVideo_U!]
  comment: CommentForVideo_U
  createdAt: DateTime!
  id: Float!
  image: Image_F_Reply_F_Video_U!
  ownerId: Float!
  parent: ReplyForVideo_U!
  published: Boolean
  text: String
  updatedAt: DateTime!
  user: UserEntity!
  video: Video_F_Reply_F_Video_U!
}

type SanitizedUser {
  audio: [Galery_Audio_U!]!
  avatar: U_Avatar_EN
  birthDate: String!
  chats: [ChatEntity!]!
  commentForPhotoEntity_G: [CommentForPhoto_G!]!
  commentForPhotoEntity_U: [CommentForPhoto_U!]!
  commentForPostEntity_G: [CommentForPost_G!]!
  commentForPostEntity_U: [CommentForPost_U!]!
  commentForVideoEntity_G: [CommentForVideo_G!]!
  commentForVideoEntity_U: [CommentForVideo_U!]!
  confirmed: Boolean!
  country: String!
  cover: U_Cover_EN
  createdAt: DateTime!
  friends: [UserEntity!]!
  group_posts: [Post_G!]!
  id: Float!
  images: [Galery_Image_U!]!
  info: UserInfoEntity!
  owned_groups: [GroupEntity!]!
  posts: [Post_U!]!
  replyForPhotoEntity_G: [ReplyForPhoto_G!]!
  replyForPhotoEntity_U: [ReplyForPhoto_U!]!
  replyForPostEntity_G: [ReplyForPost_G!]!
  replyForPostEntity_U: [ReplyForPost_U!]!
  replyForVideoEntity_G: [ReplyForVideo_G!]!
  replyForVideoEntity_U: [ReplyForVideo_U!]!
  role: String!
  sex: String!
  updatedAt: DateTime!
  username: String!
  videos: [Galery_Video_U!]!
}

input SearchComment {
  commentId: Float!
  ownerId: Float!
}

type Subscription {
  findAll: String!
  findOne: String!
  messageAdded: MessageEntity!
  remove: String!
  update: String!
}

type U_Avatar_EN {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: UserEntity!
  updatedAt: DateTime!
  url: String!
}

type U_Cover_EN {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: UserEntity!
  updatedAt: DateTime!
  url: String!
}

input UpdateComment {
  commentId: Float!
  ownerId: Float!
  published: Boolean = false
  text: String!
}

input UpdateGroupInfo_I {
  description: String
  groupId: Float!
  status: String
}

type UpdateGroupSide_O {
  blocked: Boolean!
  role: String!
  warnings: Float!
}

type UpdateGroupUserSharedSide_O {
  group_recommendation: String
  user_recommendation: String
}

input UpdatePostForGroup_I {
  findOne: FindOne_W_Owner_I!
  text: String!
}

input UpdatePostInput {
  postId: Float!
  privacy: String!
  published: Boolean!
  subject: String!
  text: String!
}

type UpdatePrivateGroupSide_O {
  ban_reason: String!
  user_characteristic: String!
}

input UpdatePrivateSide_I {
  friendId: Float!
  sideId: Float!
  update_input: UpdateUsersPrivateSide!
}

type UpdatePrivateUserSide_O {
  favorite: Boolean
  group_characteristic: String
}

input UpdateRelationShip_G {
  groupId: Float!
  update: updateT!
  userId: Float!
}

input UpdateRelationShip_U {
  groupId: Float!
  update: updateT!
}

input UpdateReply {
  published: Boolean = false
  replyId: Float!
  text: String!
}

input UpdateSharedSide_I {
  sideId: Float!
  update_input: UpdateUserSide!
}

input UpdateSide_I {
  friendId: Float!
  sideId: Float!
  update_input: UpdateUserSide!
}

input UpdateUserInfoInput {
  country: String
  first_name: String
  last_name: String
}

input UpdateUserSide {
  proposal: String
  wish: String
}

type UpdateUserSide_O {
  activity: Float!
  rating: Float!
  wish: String
}

input UpdateUsersPrivateSide {
  characteristic: String
  relation: String
}

type User1Side {
  friendShip: FriendShip!
  id: Float!
  proposal: String
  wish: String
}

type User1SidePrivate {
  characteristic: String
  friendShip: FriendShip!
  id: Float!
  relation: String
}

type User2Side {
  friendShip: FriendShip!
  id: Float!
  proposal: String
  wish: String
}

type User2SidePrivate {
  characteristic: String
  friendShip: FriendShip!
  id: Float!
  relation: String
}

type UserEntity {
  audio: [Galery_Audio_U!]!
  avatar: U_Avatar_EN
  birthDate: String!
  chats: [ChatEntity!]!
  commentForPhotoEntity_G: [CommentForPhoto_G!]!
  commentForPhotoEntity_U: [CommentForPhoto_U!]!
  commentForPostEntity_G: [CommentForPost_G!]!
  commentForPostEntity_U: [CommentForPost_U!]!
  commentForVideoEntity_G: [CommentForVideo_G!]!
  commentForVideoEntity_U: [CommentForVideo_U!]!
  confirmed: Boolean!
  country: String!
  cover: U_Cover_EN
  createdAt: DateTime!
  email: String!
  friends: [UserEntity!]!
  group_posts: [Post_G!]!
  id: Float!
  images: [Galery_Image_U!]!
  info: UserInfoEntity!
  owned_groups: [GroupEntity!]!
  posts: [Post_U!]!
  replyForPhotoEntity_G: [ReplyForPhoto_G!]!
  replyForPhotoEntity_U: [ReplyForPhoto_U!]!
  replyForPostEntity_G: [ReplyForPost_G!]!
  replyForPostEntity_U: [ReplyForPost_U!]!
  replyForVideoEntity_G: [ReplyForVideo_G!]!
  replyForVideoEntity_U: [ReplyForVideo_U!]!
  role: String!
  sex: String!
  updatedAt: DateTime!
  username: String!
  videos: [Galery_Video_U!]!
}

type UserInfoEntity {
  country: String!
  createdAt: DateTime!
  first_name: String!
  id: Float!
  last_name: String!
  owner: UserEntity!
  updatedAt: DateTime!
}

type UserPrivateSide {
  characteristic: String
  id: Float!
  relation: String
}

type UserSide {
  id: Float!
  proposal: String
  wish: String
}

type UserSidePrivate {
  favorite: Boolean!
  group_characteristic: String
  group_user_relation: Group_User_Relation!
  id: Float!
}

type UserSide_G {
  activity: Float!
  group_user_relation: Group_User_Relation!
  id: Float!
  rating: Float!
  wish: String
}

type UsersSharedSide {
  friendShip: FriendShip!
  id: Float!
  proposal: String
  wish: String
}

type Video_F_Comment_F_Photo_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPhoto_G!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Comment_F_Photo_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPhoto_U!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Comment_F_Post_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPost_G!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Comment_F_Post_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForPost_U!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Comment_F_Video_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForVideo_G!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Comment_F_Video_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: CommentForVideo_U!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Post_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: Post_G!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Post_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: Post_U!
  ownerId: Float!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Reply_F_Photo_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPhoto_G!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Reply_F_Photo_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPhoto_U!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Reply_F_Post_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPost_G!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Reply_F_Post_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForPost_U!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Reply_F_Video_G {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForVideo_G!
  updatedAt: DateTime!
  url: String!
}

type Video_F_Reply_F_Video_U {
  createdAt: DateTime!
  file_name: String!
  id: ID!
  owner: ReplyForVideo_U!
  updatedAt: DateTime!
  url: String!
}

type find_all_F_Photo_G {
  ancestor_count: Float!
  ancestors: [ReplyForPhoto_G!]!
  descendant_count: Float!
  descendants: [ReplyForPhoto_G!]!
}

type find_all_F_Photo_U {
  ancestor_count: Float!
  ancestors: [ReplyForPhoto_U!]!
  descendant_count: Float!
  descendants: [ReplyForPhoto_U!]!
}

type find_all_F_Post_G {
  ancestor_count: Float!
  ancestors: [ReplyForPost_G!]!
  descendant_count: Float!
  descendants: [ReplyForPost_G!]!
}

type find_all_F_Post_U {
  ancestor_count: Float!
  ancestors: [ReplyForPost_U!]!
  descendant_count: Float!
  descendants: [ReplyForPost_U!]!
}

type find_all_F_Video_G {
  ancestor_count: Float!
  ancestors: [ReplyForVideo_G!]!
  descendant_count: Float!
  descendants: [ReplyForVideo_G!]!
}

type find_all_F_Video_U {
  ancestor_count: Float!
  ancestors: [ReplyForVideo_U!]!
  descendant_count: Float!
  descendants: [ReplyForVideo_U!]!
}

type getAllUser_O {
  totalCount: Int!
  users: [UserEntity!]!
}

type isSuccess_G {
  groupId: Float!
  isSuccess: Boolean!
  userId: Float!
}

type isSuccess_Reply {
  id: Float!
  isSuccess: Boolean!
}

type messageT {
  message: Boolean
}

input updateT {
  blocked: Boolean!
  role: String!
}
# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Audio_F_Comment_F_Post_G {
  comment: CommentForPostEntity_G!
}

type Audio_F_Comment_F_Post_U {
  comment: CommentForPostEntity_U!
}

type Audio_F_Comment_F_Video_G {
  comment: CommentForVideoEntity_G!
}

type Audio_F_Comment_F_Video_U {
  comment: CommentForVideoEntity_U!
}

type Audio_F_Post_G {
  post: PostEntity_G!
}

type Audio_F_Post_U {
  post: PostEntity_U!
}

type ChatEntity {
  companion: Float!
  createdAt: DateTime!
  id: ID!
  messages: [MessageEntity!]!
  owner: UserEntity!
  updatedAt: DateTime!
}

type CommentForPhotoEntity_G {
  commented_photo: Galery_Image_G!
  image: Image_F_Comment_F_Photo_G!
  replies: ReplyForPhotoEntity_G!
  text: String!
  video: Video_F_Comment_F_Photo_G!
}

type CommentForPhotoEntity_U {
  commented_photo: Galery_Image_U!
  image: Image_F_Comment_F_Photo_U!
  replies: ReplyForPhotoEntity_U!
  text: String!
  video: Video_F_Comment_F_Photo_U!
}

type CommentForPostEntity_G {
  audio: Audio_F_Comment_F_Post_G!
  image: Image_F_Comment_F_Post_G!
  post: PostEntity_G!
  replies: ReplyForPostEntity_G!
  text: String!
  video: Video_F_Comment_F_Post_G!
}

type CommentForPostEntity_U {
  audio: Audio_F_Comment_F_Post_U!
  image: Image_F_Comment_F_Post_U!
  post: PostEntity_U!
  replies: ReplyForPostEntity_U!
  text: String!
  video: Video_F_Comment_F_Post_U!
}

type CommentForVideoEntity_G {
  audio: Audio_F_Comment_F_Video_G!
  commented_video: Galery_Video_G!
  image: Image_F_Comment_F_Video_G!
  replies: ReplyForVideoEntity_G!
  text: String!
  video: Video_F_Comment_F_Video_G!
}

type CommentForVideoEntity_U {
  audio: Audio_F_Comment_F_Video_U!
  commented_video: Galery_Video_U!
  image: Image_F_Comment_F_Video_U!
  replies: ReplyForVideoEntity_U!
  text: String!
  video: Video_F_Comment_F_Video_U!
}

input CreateChatInput {
  companion: Float!
  owner: Float!
}

input CreateCommentForPhoto_I_G {
  photoId: Float!
  text: String!
}

input CreateCommentForPhoto_I_U {
  photoId: Float!
  text: String!
}

input CreateCommentForPost_I_G {
  postId: Float!
  text: String!
}

input CreateCommentForPost_I_U {
  postId: Float!
  text: String!
}

input CreateCommentForVideo_I_G {
  text: String!
  videoId: Float!
}

input CreateCommentForVideo_I_U {
  text: String!
  videoId: Float!
}

input CreateGroupInfo_I {
  description: String!
  groupId: Float!
  status: String
}

input CreateGroupInput {
  category: String!
  name: String!
  slogan: String!
}

input CreateMessageInput {
  chat_id: Float!
  from: Float!
  message: String!
  to: Float!
}

input CreatePostInput {
  text: String!
}

input CreatePost_F_Group_I {
  ownerId: Float!
  text: String!
}

input CreateRelationShip_G {
  groupId: Float!
  userId: Float!
}

input CreateRequest_G {
  groupId: Float!
  userId: Float!
}

input CreateUserInfoInput {
  country: String
  first_name: String!
  last_name: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

type CreatedRequest_O {
  accepter_id: Float!
  isSuccess: Boolean!
  requester_id: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteRequest_O {
  groupId: Float!
  isSuccess: Boolean!
  userId: Float!
}

type Delete_Message_WO_Owner {
  id: Float!
  isSuccess: Boolean!
  type: String!
}

type Delete_Message_W_Owner {
  id: Float!
  isSuccess: Boolean!
  ownerId: Float!
  type: String!
}

type FindAllGroupPosts_O {
  items: [PostEntity_G!]!
  portion: Float!
  totalCount: Float!
}

type FindAllPosts_O {
  items: [PostEntity_U!]!
  portion: Float!
  totalCount: Float!
}

type FindAndCountFriends_O {
  friends: [SanitizedUser!]!
  totalCount: Float!
}

type FindAndCountRequests_O {
  requests: [FriendRequest!]!
  totalCount: Float!
}

input FindOne_W_Owner_I {
  id: Float!
  ownerId: Float
}

input FindRelationShip_G {
  groupId: Float!
  userId: Float!
}

input FindRequest_G {
  groupId: Float!
  userId: Float!
}

type FriendRequest {
  accepter: UserEntity!
  requester: UserEntity!
}

type FriendShip {
  user1: UserEntity!
  user1_side: User1Side!
  user1_side_private: User1SidePrivate!
  user2: UserEntity!
  user2_side: User2Side!
  user2_side_private: User2SidePrivate!
  users_shared_side: UsersSharedSide!
}

type G_Avatar_EN {
  group: GroupEntity!
}

type G_Cover_EN {
  group: GroupEntity!
}

type Galery_Audio_G {
  owner: GroupEntity!
}

type Galery_Audio_U {
  owner: UserEntity!
}

type Galery_Image_G {
  comments: CommentForPhotoEntity_G!
  owner: GroupEntity!
}

type Galery_Image_U {
  comments: CommentForPhotoEntity_U!
  owner: UserEntity!
}

type Galery_Video_G {
  comments: CommentForVideoEntity_G!
  owner: GroupEntity!
}

type Galery_Video_U {
  comments: CommentForVideoEntity_G!
  owner: UserEntity!
}

type GroupEntity {
  audio: [Galery_Audio_G!]!
  avatar: G_Avatar_EN!
  category: String!
  cover: G_Cover_EN!
  createdAt: DateTime!
  group_info: GroupInfo!
  id: Float!
  images: [Galery_Image_G!]!
  name: String!
  owner: UserEntity!
  posts: [PostEntity_G!]!
  slogan: String!
  updatedAt: DateTime!
  videos: [Galery_Video_G!]!
}

type GroupInfo {
  createdAt: DateTime!
  description: String!
  group: GroupEntity!
  id: Float!
  ownerId: Float!
  status: String
  updatedAt: DateTime!
}

type GroupSide {
  blocked: Boolean!
  group_user_relation: Group_User_Relation!
  id: Float!
  role: String!
  warnings: Float!
}

type GroupSidePrivate {
  ban_reason: String
  group_user_relation: Group_User_Relation!
  id: Float!
  user_characteristic: String
}

type GroupUserRequest {
  group: GroupEntity!
  group_as_what: String!
  user: UserEntity!
  user_as_what: String!
}

type GroupUserSharedSide {
  group_recommendation: String
  group_user_relation: Group_User_Relation!
  id: Float!
  user_recommendation: String
}

type Group_User_Relation {
  group: GroupEntity!
  group_side: GroupSide!
  group_side_private: GroupSidePrivate!
  shared_side: GroupUserSharedSide!
  user: UserEntity!
  user_side: UserSide_G!
  user_side_private: UserSidePrivate!
}

type Image_F_Comment_F_Photo_G {
  comment: CommentForPhotoEntity_G!
}

type Image_F_Comment_F_Photo_U {
  comment: CommentForPhotoEntity_U!
}

type Image_F_Comment_F_Post_G {
  comment: CommentForPostEntity_G!
}

type Image_F_Comment_F_Post_U {
  comment: CommentForPostEntity_U!
}

type Image_F_Comment_F_Video_G {
  comment: CommentForVideoEntity_G!
}

type Image_F_Comment_F_Video_U {
  comment: CommentForVideoEntity_U!
}

type Image_F_Post_G {
  post: PostEntity_G!
}

type Image_F_Post_U {
  post: PostEntity_U!
}

type Image_F_Reply_F_Photo_G {
  reply: ReplyForPhotoEntity_G!
}

type Image_F_Reply_F_Photo_U {
  reply: ReplyForPhotoEntity_U!
}

type Image_F_Reply_F_Post_G {
  reply: ReplyForPostEntity_G!
}

type Image_F_Reply_F_Post_U {
  reply: ReplyForPostEntity_U!
}

type Image_F_Reply_F_Video_G {
  reply: ReplyForVideoEntity_G!
}

type Image_F_Reply_F_Video_U {
  reply: ReplyForVideoEntity_U!
}

type IsSuccess_O {
  friendId: Float!
  isSuccess: Boolean!
}

input LoginUserInput {
  password: String!
  username: String!
}

type MessageEntity {
  chat: ChatEntity!
  createdAt: DateTime!
  from: Float!
  id: Float!
  message: String!
  to: Float!
  updatedAt: DateTime!
}

type Mutation {
  addMessage(createMessage: CreateMessageInput!): MessageEntity!
  createChat(createChat: CreateChatInput!): ChatEntity!
  createCommentForPhotoEntity_G(createCommentInput: CreateCommentForPhoto_I_G!): CommentForPhotoEntity_G!
  createCommentForPhotoEntity_U(createCommentInput: CreateCommentForPhoto_I_U!): CommentForPhotoEntity_U!
  createCommentForPostEntity_G(createCommentInput: CreateCommentForPost_I_G!): CommentForPostEntity_G!
  createCommentForPostEntity_U(createCommentInput: CreateCommentForPost_I_U!): CommentForPostEntity_U!
  createCommentForVideoEntity_G(createCommentInput: CreateCommentForVideo_I_G!): CommentForVideoEntity_G!
  createCommentForVideoEntity_U(createCommentInput: CreateCommentForVideo_I_U!): CommentForVideoEntity_U!
  createFriendShip(requester_id: Float!): SanitizedUser!
  createGroup(createGroupInput: CreateGroupInput!): GroupEntity!
  createGroupInfo(createGroupInfoInput: CreateGroupInfo_I!): GroupInfo!
  createGroupToUserRequest(createGroupToUserRequest: CreateRequest_G!): GroupUserRequest!
  createGroupUserRelationship_G(CreateRelationShip_G: CreateRelationShip_G!): Group_User_Relation!
  createGroupUserRelationship_U(groupId: Float!): Group_User_Relation!
  createPost(createPostInput: CreatePostInput!): PostEntity_U!
  createPostForGroup(createPostForGroup: CreatePost_F_Group_I!): PostEntity_G!
  createRequest(accepter_id: Float!): CreatedRequest_O!
  createUser(createUser: CreateUserInput!): UserEntity!
  createUserInfo(createUserInfoInput: CreateUserInfoInput!): UserInfoEntity!
  createUserToGroupRequest(groupId: Float!): GroupUserRequest!
  declineAllRequests: FriendRequest!
  declineRequest(accepter_id: Float!): FriendRequest!
  destroyRelationship_G(FindRelationShip_G: FindRelationShip_G!): isSuccess_G!
  destroyRelationship_U(groupId: Float!): isSuccess_G!
  logOut: messageT!
  login(loginUserInput: LoginUserInput!): UserEntity!
  refreshToken: messageT!
  removeCommentForPhotoEntity_G(searchAllCommentForVideo: SearchCommentForPhoto_I_G!): CommentForPhotoEntity_G!
  removeCommentForPhotoEntity_U(searchAllCommentForVideo: SearchCommentForPhoto_I_U!): CommentForPhotoEntity_U!
  removeCommentForPostEntity_G(searchAllCommentForPost: SearchCommentForPost_I_G!): CommentForPostEntity_U!
  removeCommentForPostEntity_U(searchAllCommentForPost: SearchCommentForPost_I_U!): CommentForPostEntity_U!
  removeCommentForVideoEntity_G(searchAllCommentForVideo: SearchCommentForVideo_I_G!): CommentForVideoEntity_G!
  removeCommentForVideoEntity_U(searchAllCommentForVideo: SearchCommentForVideo_I_U!): CommentForVideoEntity_U!
  removeFriend(friendId: Float!): IsSuccess_O!
  removeGroup(groupId: Float!): GroupEntity!
  removeGroupInfo(id: Float!): Delete_Message_WO_Owner!
  removeMyRequest(accepter_id: Float!): FriendRequest!
  removePost(postId: Float!): Delete_Message_W_Owner!
  removePostForGroup(removeGroupPost: FindOne_W_Owner_I!): Delete_Message_W_Owner!
  removeRequestToGroup(groupId: Float!): DeleteRequest_O!
  removeRequestToUser(findGroupToUserRequest: FindRequest_G!): DeleteRequest_O!
  removeUser(id: Float!): Float!
  updateCommentForPhotoEntity_G(updateCommentInput: UpdateCommentForPhoto_I_G!): CommentForPhotoEntity_G!
  updateCommentForPhotoEntity_U(updateCommentInput: UpdateCommentForPhoto_I_U!): CommentForPhotoEntity_U!
  updateCommentForPostEntity_G(updateCommentInput: UpdateCommentForPost_I_G!): CommentForPostEntity_G!
  updateCommentForPostEntity_U(updateCommentInput: UpdateCommentForPost_I_U!): CommentForPostEntity_U!
  updateCommentForVideoEntity_G(updateCommentInput: UpdateCommentForVideo_I_G!): CommentForVideoEntity_G!
  updateCommentForVideoEntity_U(updateCommentInput: UpdateCommentForVideo_I_U!): CommentForVideoEntity_U!
  updateGroupInfo(updateGroupInfoInput: UpdateGroupInfo_I!): GroupInfo!
  updateGroupPrivateSide(updateGroupPrivateSide: UpdateRelationShip_G!): UpdatePrivateGroupSide_O!
  updateGroupSide(UpdateRelationShip_G: UpdateRelationShip_G!): UpdateGroupSide_O!
  updateMyPrivateSide(myPrivateSideUpdate: UpdatePrivateSide_I!): UserPrivateSide!
  updateMySide(mySideUpdate: UpdateSide_I!): UserSide!
  updateOwnedGroup: GroupEntity!
  updatePost(updatePostInput: UpdatePostInput!): PostEntity_U!
  updatePostForGroup(updatePostsForGroupInput: UpdatePostForGroup_I!): PostEntity_G!
  updateSharedSide(sharedSideUpdate: UpdateSharedSide_I!): UserSide!
  updateUserInfo(updateUserInfoInput: UpdateUserInfoInput!): UserInfoEntity!
  updateUserPrivateSide(updateUserPrivateSide: UpdateRelationShip_U!): UpdatePrivateUserSide_O!
  updateUserSide(UpdateRelationShip_U: UpdateRelationShip_U!): UpdateUserSide_O!
  updateUsersSensitiveData(updateUser: UpdateUserInput!): UserEntity!
}

type PostEntity_G {
  audio: Audio_F_Post_G!
  comments: [CommentForPostEntity_G!]!
  createdAt: DateTime!
  id: Float!
  image: Image_F_Post_G!
  likes: Float!
  owner: GroupEntity!
  text: String!
  updatedAt: DateTime!
  video: Video_F_Post_G!
}

type PostEntity_U {
  audio: Audio_F_Post_U!
  comments: [CommentForPostEntity_U!]!
  createdAt: DateTime!
  id: ID!
  image: Image_F_Post_U!
  likes: Float!
  owner: UserEntity!
  text: String!
  updatedAt: DateTime!
  video: Video_F_Post_U!
}

type Query {
  findAllCommentsForPhotoEntity_G(photoId: Float!): [CommentForPhotoEntity_G!]!
  findAllCommentsForPhotoEntity_U(photoId: Float!): [CommentForPhotoEntity_U!]!
  findAllCommentsForPostEntity_G(photoId: Float!): [CommentForPostEntity_G!]!
  findAllCommentsForPostEntity_U(photoId: Float!): [CommentForPostEntity_U!]!
  findAllCommentsForVideoEntity_G(videoId: Float!): [CommentForVideoEntity_G!]!
  findAllCommentsForVideoEntity_U(photoId: Float!): [CommentForVideoEntity_U!]!
  findAllFriends: FindAndCountFriends_O!
  findAllGroupPosts(groupId: Float!): FindAllGroupPosts_O!
  findAllMyRequests: FindAndCountRequests_O!
  findAllOwnedGroups: [GroupEntity!]!
  findAllPosts(id: Float): FindAllPosts_O!
  findAllRelationshipsWithGroups: [Group_User_Relation!]!
  findAllRelationshipsWithUsers(groupId: Float!): [Group_User_Relation!]!
  findAllRequestsToGroup: [GroupUserRequest!]!
  findAllRequestsToMe: FindAndCountRequests_O!
  findAllRequestsToUser(groupId: Float!): [GroupUserRequest!]!
  findOne(searchAllCommentForVideo: SearchCommentForPhoto_I_G!): CommentForPhotoEntity_G!
  findOneCommentForPhotoEntity_U(searchAllCommentForVideo: SearchCommentForPhoto_I_U!): CommentForPostEntity_U!
  findOneCommentForPostEntity_G(searchAllCommentForPost: SearchCommentForPost_I_G!): CommentForPostEntity_G!
  findOneCommentForPostEntity_U(searchAllCommentForPost: SearchCommentForPost_I_U!): CommentForPostEntity_U!
  findOneCommentForVideoEntity_G(searchAllCommentForVideo: SearchCommentForVideo_I_G!): CommentForVideoEntity_G!
  findOneCommentForVideoEntity_U(searchAllCommentForVideo: SearchCommentForVideo_I_U!): CommentForVideoEntity_U!
  findOneFriend(friendId: Float!): SanitizedUser!
  findOneGroupInfo(id: Float!): GroupInfo!
  findOneGroupPost(findGroupPost: FindOne_W_Owner_I!): PostEntity_G!
  findOneMyRequest(accepter_id: Float!): FriendRequest!
  findOneOwnedGroup(groupId: Float!): GroupEntity!
  findOnePost(findPost: FindOne_W_Owner_I!): PostEntity_U!
  findOneRelationshipWithGroup(groupId: Float!): Group_User_Relation!
  findOneRelationshipWithUser(FindRelationShip_G: FindRelationShip_G!): Group_User_Relation!
  findOneRequestToGroup(groupId: Float!): GroupUserRequest!
  findOneRequestToMe(accepter_id: Float!): FriendRequest!
  findOneRequestToUser(findGroupToUserRequest: FindRequest_G!): GroupUserRequest!
  findOneUserInfo(id: Float): UserInfoEntity!
  getAllUsers: getAllUser_O!
  getOneUser(id: Float): UserEntity!
  readMyFriendsSide(readMyFriendsSide: ReadSide_I!): UserSide!
  readMyPrivateSide(readMyPrivateSide: ReadSide_I!): UserPrivateSide!
  readMySide(readMySide: ReadSide_I!): UserSide!
  removeFriend(sideId: Float!): UsersSharedSide!
  returnAllChats: ChatEntity!
}

input ReadSide_I {
  friendId: Float!
  sideId: Float!
}

type ReplyForPhotoEntity_G {
  comment: CommentForPhotoEntity_G!
  image: Image_F_Reply_F_Photo_G!
  repliesO: [ReplyOForPhotoEntity_G!]!
  text: String!
  video: Video_F_Reply_F_Photo_G!
}

type ReplyForPhotoEntity_U {
  comment: CommentForPhotoEntity_U!
  image: Image_F_Reply_F_Photo_U!
  repliesO: [ReplyOForPhotoEntity_U!]!
  text: String!
  video: Video_F_Reply_F_Photo_U!
}

type ReplyForPostEntity_G {
  comment: CommentForPostEntity_G!
  image: Image_F_Reply_F_Post_G!
  repliesO: [ReplyOForPostEntity_G!]!
  text: String!
  video: Video_F_Reply_F_Photo_G!
}

type ReplyForPostEntity_U {
  comment: CommentForPostEntity_U!
  image: Image_F_Reply_F_Post_U!
  repliesO: [ReplyOForPostEntity_U!]!
  text: String!
  video: Video_F_Reply_F_Photo_U!
}

type ReplyForVideoEntity_G {
  comment: CommentForVideoEntity_G!
  image: Image_F_Reply_F_Video_G!
  repliesO: [ReplyOForVideoEntity_G!]!
  text: String!
  video: Video_F_Reply_F_Photo_G!
}

type ReplyForVideoEntity_U {
  comment: CommentForVideoEntity_U!
  image: Image_F_Reply_F_Video_U!
  repliesO: [ReplyOForVideoEntity_U!]!
  text: String!
  video: Video_F_Reply_F_Photo_U!
}

type ReplyOForPhotoEntity_G {
  image: Image_F_Reply_F_Photo_G!
  reply: ReplyForPhotoEntity_G!
  text: String!
  video: Video_F_Reply_F_Photo_G!
}

type ReplyOForPhotoEntity_U {
  image: Image_F_Reply_F_Photo_U!
  reply: ReplyForPhotoEntity_U!
  text: String!
  video: Video_F_Reply_F_Photo_U!
}

type ReplyOForPostEntity_G {
  image: Image_F_Reply_F_Post_G!
  reply: ReplyForPostEntity_G!
  text: String!
  video: Video_F_Reply_F_Post_G!
}

type ReplyOForPostEntity_U {
  image: Image_F_Reply_F_Post_U!
  reply: ReplyForPostEntity_U!
  text: String!
  video: Video_F_Reply_F_Post_U!
}

type ReplyOForVideoEntity_G {
  image: Image_F_Reply_F_Video_G!
  reply: ReplyForVideoEntity_G!
  text: String!
  video: Video_F_Reply_F_Video_G!
}

type ReplyOForVideoEntity_U {
  image: Image_F_Reply_F_Video_U!
  reply: ReplyForVideoEntity_U!
  text: String!
  video: Video_F_Reply_F_Video_U!
}

type SanitizedUser {
  audio: [Galery_Audio_U!]!
  avatar: U_Avatar_EN!
  chats: ChatEntity!
  cover: U_Cover_EN!
  createdAt: DateTime!
  friends: [UserEntity!]!
  id: Float!
  images: [Galery_Audio_U!]!
  info: UserInfoEntity!
  owned_groups: [GroupEntity!]!
  posts: [PostEntity_U!]!
  updatedAt: DateTime!
  username: String!
  videos: [Galery_Video_U!]!
}

input SearchCommentForPhoto_I_G {
  commentId: Float!
  photoId: Float!
}

input SearchCommentForPhoto_I_U {
  commentId: Float!
  photoId: Float!
}

input SearchCommentForPost_I_G {
  commentId: Float!
  postId: Float!
}

input SearchCommentForPost_I_U {
  commentId: Float!
  postId: Float!
}

input SearchCommentForVideo_I_G {
  commentId: Float!
  videoId: Float!
}

input SearchCommentForVideo_I_U {
  commentId: Float!
  videoId: Float!
}

type Subscription {
  findAll: String!
  findOne: String!
  messageAdded: MessageEntity!
  remove: String!
  update: String!
}

type U_Avatar_EN {
  owner: UserEntity!
}

type U_Cover_EN {
  owner: UserEntity!
}

input UpdateCommentForPhoto_I_G {
  commentId: Float!
  photoId: Float!
  text: String!
}

input UpdateCommentForPhoto_I_U {
  commentId: Float!
  photoId: Float!
  text: String!
}

input UpdateCommentForPost_I_G {
  commentId: Float!
  postId: Float!
  text: String!
}

input UpdateCommentForPost_I_U {
  commentId: Float!
  postId: Float!
  text: String!
}

input UpdateCommentForVideo_I_G {
  commentId: Float!
  text: String!
  videoId: Float!
}

input UpdateCommentForVideo_I_U {
  commentId: Float!
  text: String!
  videoId: Float!
}

input UpdateGroupInfo_I {
  description: String
  groupId: Float!
  status: String
}

type UpdateGroupSide_O {
  blocked: Boolean!
  role: String!
  warnings: Float!
}

type UpdateGroupUserSharedSide_O {
  group_recommendation: String
  user_recommendation: String
}

input UpdatePostForGroup_I {
  findOne: FindOne_W_Owner_I!
  text: String!
}

input UpdatePostInput {
  postId: Float!
  text: String!
}

type UpdatePrivateGroupSide_O {
  ban_reason: String!
  user_characteristic: String!
}

input UpdatePrivateSide_I {
  friendId: Float!
  sideId: Float!
  update_input: UpdateUsersPrivateSide!
}

type UpdatePrivateUserSide_O {
  favorite: Boolean
  group_characteristic: String
}

input UpdateRelationShip_G {
  groupId: Float!
  update: updateT!
  userId: Float!
}

input UpdateRelationShip_U {
  groupId: Float!
  update: updateT!
}

input UpdateSharedSide_I {
  sideId: Float!
  update_input: UpdateUserSide!
}

input UpdateSide_I {
  friendId: Float!
  sideId: Float!
  update_input: UpdateUserSide!
}

input UpdateUserInfoInput {
  country: String
  first_name: String
  last_name: String
}

input UpdateUserInput {
  email: String
  username: String
}

input UpdateUserSide {
  proposal: String
  wish: String
}

type UpdateUserSide_O {
  activity: Float!
  rating: Float!
  wish: String
}

input UpdateUsersPrivateSide {
  characteristic: String
  relation: String
}

type User1Side {
  friendShip: FriendShip!
  id: Float!
  proposal: String
  wish: String
}

type User1SidePrivate {
  characteristic: String
  friendShip: FriendShip!
  id: Float!
  relation: String
}

type User2Side {
  friendShip: FriendShip!
  id: Float!
  proposal: String
  wish: String
}

type User2SidePrivate {
  characteristic: String
  friendShip: FriendShip!
  id: Float!
  relation: String
}

type UserEntity {
  audio: [Galery_Audio_U!]!
  avatar: U_Avatar_EN!
  chats: ChatEntity!
  cover: U_Cover_EN!
  createdAt: DateTime!
  email: String!
  friends: [UserEntity!]!
  id: Float!
  images: [Galery_Audio_U!]!
  info: UserInfoEntity!
  owned_groups: [GroupEntity!]!
  posts: [PostEntity_U!]!
  role: String!
  updatedAt: DateTime!
  username: String!
  videos: [Galery_Video_U!]!
}

type UserInfoEntity {
  country: String!
  createdAt: DateTime!
  first_name: String!
  id: ID!
  last_name: String!
  owner: UserEntity!
  updatedAt: DateTime!
}

type UserPrivateSide {
  characteristic: String
  id: Float!
  relation: String
}

type UserSide {
  id: Float!
  proposal: String
  wish: String
}

type UserSidePrivate {
  favorite: Boolean!
  group_characteristic: String
  group_user_relation: Group_User_Relation!
  id: Float!
}

type UserSide_G {
  activity: Float!
  group_user_relation: Group_User_Relation!
  id: Float!
  rating: Float!
  wish: String
}

type UsersSharedSide {
  friendShip: FriendShip!
  id: Float!
  proposal: String
  wish: String
}

type Video_F_Comment_F_Photo_G {
  comment: CommentForPhotoEntity_G!
}

type Video_F_Comment_F_Photo_U {
  comment: CommentForPhotoEntity_U!
}

type Video_F_Comment_F_Post_G {
  comment: CommentForPostEntity_G!
}

type Video_F_Comment_F_Post_U {
  comment: CommentForPostEntity_U!
}

type Video_F_Comment_F_Video_G {
  comment: CommentForVideoEntity_G!
}

type Video_F_Comment_F_Video_U {
  comment: CommentForVideoEntity_U!
}

type Video_F_Post_G {
  post: PostEntity_G!
}

type Video_F_Post_U {
  post: PostEntity_U!
}

type Video_F_Reply_F_Photo_G {
  reply: ReplyForPhotoEntity_G!
}

type Video_F_Reply_F_Photo_U {
  reply: ReplyForPhotoEntity_U!
}

type Video_F_Reply_F_Post_G {
  reply: ReplyForPostEntity_G!
}

type Video_F_Reply_F_Post_U {
  reply: ReplyForPostEntity_U!
}

type Video_F_Reply_F_Video_G {
  reply: ReplyForVideoEntity_G!
}

type Video_F_Reply_F_Video_U {
  reply: ReplyForVideoEntity_U!
}

type getAllUser_O {
  totalCount: Int!
  users: [UserEntity!]!
}

type isSuccess_G {
  groupId: Float!
  isSuccess: Boolean!
  userId: Float!
}

type messageT {
  message: Boolean
}

input updateT {
  blocked: Boolean!
  role: String!
}